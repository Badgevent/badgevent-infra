Description:  This template deploys a VPC and resources for World Fandom

Parameters:
  pEnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  pVpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  pAZ1:
    Description: First AZ Index (letter order and 0 based)
    Type: String
    Default: 5

  pAZ2:
    Description: Second AZ Index (letter order and 0 based)
    Type: String
    Default: 0

  pPublicKey:
    Description: RSA Public Key to use for SSH Access
    Type: String

Resources:

  rKeyPair:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyName: !Ref pEnvironmentName
      KeyType: rsa
      PublicKeyMaterial: !Ref pPublicKey

  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref pEnvironmentName

  rCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref rVPC

  rInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref pEnvironmentName

  rInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: rCidrBlock
    Properties:
      InternetGatewayId: !Ref rInternetGateway
      VpcId: !Ref rVPC

  rPublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: rCidrBlock
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select [ !Ref pAZ1, !GetAZs '' ]
      AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt rVPC.CidrBlock, 4, 6 ]]
      Ipv6CidrBlock: !Select [ 0, !Cidr [ !Select [ 0, !GetAtt rVPC.Ipv6CidrBlocks], 4, 64 ]]
      Tags:
        - Key: Name
          Value: !Sub ${pEnvironmentName} Public Subnet (AZ1)

  rPublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: rCidrBlock
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select [ !Ref pAZ2, !GetAZs  '' ]
      AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt rVPC.CidrBlock, 4, 6 ]]
      Ipv6CidrBlock: !Select [ 1, !Cidr [ !Select [ 0, !GetAtt rVPC.Ipv6CidrBlocks], 4, 64 ]]
      Tags:
        - Key: Name
          Value: !Sub ${pEnvironmentName} Public Subnet (AZ2)

  rNatGatewaySubnet1EIP:
    Type: AWS::EC2::EIP

  rNatGatewaySubnet1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt rNatGatewaySubnet1EIP.AllocationId
      SubnetId: !Ref rPublicSubnet1

  rNatGatewaySubnet2EIP:
    Type: AWS::EC2::EIP

  rNatGatewaySubnet2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt rNatGatewaySubnet2EIP.AllocationId
      SubnetId: !Ref rPublicSubnet2

  rPrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: rCidrBlock
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select [ !Ref pAZ1, !GetAZs  '' ]
      AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt rVPC.CidrBlock, 4, 6 ]]
      Ipv6CidrBlock: !Select [ 2, !Cidr [ !Select [ 0, !GetAtt rVPC.Ipv6CidrBlocks], 4, 64 ]]
      Tags:
        - Key: Name
          Value: !Sub ${pEnvironmentName} Private Subnet (AZ1)

  rPrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: rCidrBlock
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select [ !Ref pAZ2, !GetAZs  '' ]
      AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt rVPC.CidrBlock, 4, 6 ]]
      Ipv6CidrBlock: !Select [ 3, !Cidr [ !Select [ 0, !GetAtt rVPC.Ipv6CidrBlocks], 4, 64 ]]
      Tags:
        - Key: Name
          Value: !Sub ${pEnvironmentName} Private Subnet (AZ2)

  rEgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    DependsOn: rCidrBlock
    Properties:
      VpcId: !Ref rVPC

  rPublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: rCidrBlock
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${pEnvironmentName} Public Routes

  rDefaultPublicIpv6Route:
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref rInternetGateway

  rDefaultPublicIpv4Route:
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway

  rPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      SubnetId: !Ref rPublicSubnet1

  rPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      SubnetId: !Ref rPublicSubnet2

  rPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${pEnvironmentName} Private Routes (AZ1)

  rDefaultIpv6Route1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivateRouteTable1
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref rEgressOnlyInternetGateway

  rDefaultIpv4Route1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewaySubnet1

  rPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivateRouteTable1
      SubnetId: !Ref rPrivateSubnet1

  rPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${pEnvironmentName} Private Routes (AZ2)

  rDefaultIpv6Route2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivateRouteTable2
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref rEgressOnlyInternetGateway

  rDefaultIpV4Route2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewaySubnet2

  rPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivateRouteTable2
      SubnetId: !Ref rPrivateSubnet2

  rS3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref rPublicRouteTable
        - !Ref rPrivateRouteTable1
        - !Ref rPrivateRouteTable2
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref rVPC

  rDDBGatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref rPublicRouteTable
        - !Ref rPrivateRouteTable1
        - !Ref rPrivateRouteTable2
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcId: !Ref rVPC

  rLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: rCidrBlock
    Properties:
      GroupName: "load-balancer"
      GroupDescription: !Sub "${pEnvironmentName} Load Balancer"
      VpcId: !Ref rVPC
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIpv6: ::/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 443
        CidrIpv6: ::/0

  rWebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: rCidrBlock
    Properties:
      GroupName: "web-server"
      GroupDescription: !Sub "${pEnvironmentName} Web Servers"
      VpcId: !Ref rVPC
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref rLoadBalancerSecurityGroup

  rDevServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: rCidrBlock
    Properties:
      GroupName: "dev-server"
      GroupDescription: !Sub "${pEnvironmentName} Dev Servers"
      VpcId: !Ref rVPC

  rDatabaseServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: rCidrBlock
    Properties:
      GroupName: "database-server"
      GroupDescription: !Sub "${pEnvironmentName} Database Servers"
      VpcId: !Ref rVPC
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref rWebServerSecurityGroup
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref rDevServerSecurityGroup

  rWebServerEc2InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Description: Role to be used as an Instance Profile for Web Servers
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadOnlyAccess
      RoleName: !Sub "${pEnvironmentName}WebServerRole"

  rDevServerEc2InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Description: Role to be used as an Instance Profile for the Dev Server
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess
      RoleName: !Sub "${pEnvironmentName}DevServerRole"

  rWebServerEFS:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties: 
      BackupPolicy: 
        Status: ENABLED
      Encrypted: True
      PerformanceMode: generalPurpose

  rWebServerEfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: rCidrBlock
    Properties:
      GroupName: "webserver-efs"
      GroupDescription: !Sub "${pEnvironmentName} WebServer EFS"
      VpcId: !Ref rVPC
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !Ref rWebServerSecurityGroup
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !Ref rDevServerSecurityGroup

  rWebServerEfsMountTargetAZ1:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref rWebServerEFS
      SecurityGroups: 
        - !Ref rWebServerEfsSecurityGroup
      SubnetId: !Ref rPrivateSubnet1

  rWebServerEfsMountTargetAZ2:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref rWebServerEFS
      SecurityGroups: 
        - !Ref rWebServerEfsSecurityGroup
      SubnetId: !Ref rPrivateSubnet2

  rDevServerEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub "${pEnvironmentName}DevServer"
      Path: /
      Roles: 
       - !Ref rDevServerEc2InstanceRole

  rWebServerEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub "${pEnvironmentName}WebServer"
      Path: /
      Roles: 
       - !Ref rWebServerEc2InstanceRole

  rDevServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${pEnvironmentName}DevServer
      LaunchTemplateData:
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          Groups:
            - !Ref rDevServerSecurityGroup
          DeleteOnTermination: true
        ImageId: ami-01b5ec3ed8678d8b7
        InstanceType: t4g.nano
        KeyName: !Ref rKeyPair
        UserData:
          Fn::Base64: !Sub |
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

            --==MYBOUNDARY==
            Content-Type: text/cloud-config; charset="us-ascii"

            package-update: true

            bootcmd:
            - amazon-linux-extras enable nginx1.12 php7.2
            - yum clean metadata

            packages:
            - amazon-efs-utils
            - amazon-cloudwatch-agent
            - git
            - nginx 
            - php 
            - php-fpm 
            - php-cli 
            - php-gd 
            - php-pdo 
            - php-json 
            - php-mysqlnd 
            - php-mbstring 
            - php-xml

            runcmd:
            - file_system_id_01=${rWebServerEFS}
            - efs_directory=/mnt/efs

            - mkdir -p ${!efs_directory}
            - echo "${!file_system_id_01}:/ ${!efs_directory} efs rw,tls,_netdev" >> /etc/fstab
            - mount -a -t efs defaults

            --==MYBOUNDARY==--
        IamInstanceProfile:
          Name: !Ref rDevServerEc2InstanceProfile
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: !Sub "${pEnvironmentName}-DevServer"
        MetadataOptions:
          HttpProtocolIpv6: enabled
          HttpTokens: required
          InstanceMetadataTags: enabled

  rWebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${pEnvironmentName}WebServer
      LaunchTemplateData:
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          Groups:
            - !Ref rWebServerSecurityGroup
          DeleteOnTermination: true
        ImageId: ami-01b5ec3ed8678d8b7
        InstanceType: m6gd.medium
        KeyName: !Ref rKeyPair
        UserData:
          Fn::Base64: !Sub |
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

            --==MYBOUNDARY==
            Content-Type: text/cloud-config; charset="us-ascii"

            package-update: true

            bootcmd:
            - amazon-linux-extras enable nginx1.12 php7.2
            - yum clean metadata

            packages:
            - amazon-efs-utils
            - amazon-cloudwatch-agent
            - nginx 
            - php 
            - php-fpm 
            - php-cli 
            - php-gd 
            - php-pdo 
            - php-json 
            - php-mysqlnd 
            - php-mbstring 
            - php-xml

            runcmd:
            - file_system_id_01=${rWebServerEFS}
            - efs_directory=/mnt/efs

            - mkdir -p ${!efs_directory}
            - echo "${!file_system_id_01}:/ ${!efs_directory} efs ro,tls,_netdev" >> /etc/fstab
            - mount -a -t efs defaults

            - mkfs -t xfs /dev/nvme1n1
            - data_uuid=`lsblk -o UUID -n /dev/nvme1n1`
            - echo "UUID=$data_uuid /data xfs defaults,nofail 0 2" >>/etc/fstab
            - mkdir /data
            - mount /data
            - chown apache /data
            - chgrp apache /data
            - chmod 2774 /data
            - umask 0002
            - mkdir -p /data/smarty/templates/bin
            - mkdir -p /data/smarty/templates/cache
            - mkdir -p /data/smarty/templates/configs

            - cp /mnt/efs/Con-Organizer/config/etc_nginx_nginx.conf /etc/nginx/nginx.conf
            - cp /mnt/efs/Con-Organizer/config/etc_php-fpm.d_www.conf /etc/php-fpm.d/www.conf

            --==MYBOUNDARY==--
        IamInstanceProfile:
          Name: !Ref rWebServerEc2InstanceProfile
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: !Sub "${pEnvironmentName}-WebServer"
        MetadataOptions:
          HttpProtocolIpv6: enabled
          HttpTokens: required
          InstanceMetadataTags: enabled

  rWebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200
      Name: !Sub "${pEnvironmentName}-WebServers"
      Port: 443
      Protocol: HTTPS
      ProtocolVersion: HTTP2
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref rVPC

  rDevServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: false
      IpAddressType: ipv4
      Name: !Sub "${pEnvironmentName}-DevServers"
      Port: 443
      Protocol: HTTPS
      ProtocolVersion: HTTP2
      TargetType: instance
      VpcId: !Ref rVPC

  rWebServerAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${pEnvironmentName}-WebServers"
      AvailabilityZones: 
        - !Select [ !Ref pAZ1, !GetAZs '' ]
        - !Select [ !Ref pAZ2, !GetAZs '' ]
      Cooldown: 300
      DefaultInstanceWarmup: 0
      DesiredCapacity: 1
      DesiredCapacityType: units
      HealthCheckGracePeriod: 0
      HealthCheckType: EC2
      LaunchTemplate: 
        LaunchTemplateId: !Ref rWebServerLaunchTemplate
        Version: !GetAtt rWebServerLaunchTemplate.LatestVersionNumber
      MaxSize: 1
      MinSize: 1
      TargetGroupARNs: 
        - !Ref rWebServerTargetGroup
      VPCZoneIdentifier: 
        - !Ref rPrivateSubnet1
        - !Ref rPrivateSubnet2

  rDevServerAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${pEnvironmentName}-DevServers"
      AvailabilityZones: 
        - !Select [ !Ref pAZ1, !GetAZs '' ]
        - !Select [ !Ref pAZ2, !GetAZs '' ]
      Cooldown: 300
      DefaultInstanceWarmup: 0
      DesiredCapacity: 1
      DesiredCapacityType: units
      HealthCheckGracePeriod: 0
      HealthCheckType: EC2
      LaunchTemplate: 
        LaunchTemplateId: !Ref rDevServerLaunchTemplate
        Version: !GetAtt rDevServerLaunchTemplate.LatestVersionNumber
      MaxSize: 1
      MinSize: 1
      TargetGroupARNs: 
        - !Ref rDevServerTargetGroup
      VPCZoneIdentifier: 
        - !Ref rPrivateSubnet1
        - !Ref rPrivateSubnet2


  # rWebServerLoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties: 
  #     IpAddressType: dualstack
  #     # LoadBalancerAttributes: 
  #     #   - LoadBalancerAttribute #TODO S3 Logs
  #     Name: !Sub "${pEnvironmentName}WebServer"
  #     Scheme: internet-facing
  #     SecurityGroups: 
  #       - !Ref rLoadBalancerSecurityGroup
  #     Subnets: 
  #       - !Ref rPublicSubnet1
  #       - !Ref rPublicSubnet2
  #     Type: application

  # rHTTPlistener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: redirect
  #         RedirectConfig:
  #           Protocol: HTTPS
  #           Port: 443
  #           Host: "#{host}"
  #           Path: "/#{path}"
  #           Query: "#{query}"
  #           StatusCode: "HTTP_301"
  #     LoadBalancerArn: !Ref rWebServerLoadBalancer
  #     Port: 80
  #     Protocol: HTTP

  # rWebServerHttpsListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties: 
  #     DefaultActions: 
  #       - Type: forward
  #         ForwardConfig:
  #           TargetGroups:
  #             - TargetGroupArn: !Ref rWebServerTargetGroup
  #     LoadBalancerArn: !Ref rWebServerLoadBalancer
  #     Port: 443
  #     Protocol: HTTPS

  # rDatabaseSubnetGroup:
  #   Type: AWS::RDS::DBSubnetGroup
  #   Properties: 
  #     DBSubnetGroupName: !Ref pEnvironmentName
  #     DBSubnetGroupDescription: !Sub "${pEnvironmentName} Database Availability Zones"
  #     SubnetIds: 
  #       - !Ref rPrivateSubnet1
  #       - !Ref rPrivateSubnet2

  # rMySQLAdmin:
  #   Type: AWS::SecretsManager::Secret
  #   DeletionPolicy: Retain
  #   Properties:
  #     KmsKeyId: alias/aws/secretsmanager
  #     GenerateSecretString:
  #       SecretStringTemplate: !Join [ '', [ '{"username": "', admin, '"}' ] ]
  #       GenerateStringKey: 'password'
  #       PasswordLength: 16
  #       ExcludeCharacters: '"@/\'

  # rDBEnhancedMonitoringRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     ManagedPolicyArns:
  #       - "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
  #     AssumeRolePolicyDocument:
  #       Version: "2008-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: "monitoring.rds.amazonaws.com"
  #           Action: "sts:AssumeRole"

  # rDBClusterParameterGroup:
  #   Type: AWS::RDS::DBClusterParameterGroup
  #   Properties:
  #     Description: !Sub Database cluster parameter group for RDS Aurora ${pEnvironmentName}
  #     Family: aurora-mysql8.0
  #     Parameters:
  #       tls_version: TLSv1.2

  # rDBParamGroup:
  #   Type: AWS::RDS::DBParameterGroup
  #   Properties:
  #     Description: !Sub Database parameter group for RDS Aurora ${pEnvironmentName}
  #     Family: aurora-mysql8.0
  #     Parameters:
  #       performance_schema: 0

  # rServerlessV2Cluster:
  #   Type: 'AWS::RDS::DBCluster'
  #   # DeletionPolicy: Snapshot
  #   # UpdateReplacePolicy: Snapshot
  #   Properties:
  #     DatabaseName: !Ref pEnvironmentName
  #     Engine: aurora-mysql
  #     EngineMode: provisioned
  #     EngineVersion: 8.0.mysql_aurora.3.02.2
  #     DBSubnetGroupName: !Ref rDatabaseSubnetGroup
  #     DBClusterParameterGroupName: !Ref rDBClusterParameterGroup
  #     MasterUsername: admin
  #     MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref rMySQLAdmin, ':SecretString:password}}' ] ]
  #     ServerlessV2ScalingConfiguration:
  #       MinCapacity: 0.5
  #       MaxCapacity: 2
  #     VpcSecurityGroupIds:
  #       - !Ref rDatabaseServerSecurityGroup
  #     StorageEncrypted: true

  # rDBFirstInstance:
  #   Type: "AWS::RDS::DBInstance"
  #   Properties:
  #     AllowMajorVersionUpgrade: false
  #     AutoMinorVersionUpgrade: true
  #     CopyTagsToSnapshot: true
  #     DBClusterIdentifier: !Ref rServerlessV2Cluster
  #     DBInstanceClass: db.serverless
  #     DBParameterGroupName: !Ref rDBParamGroup
  #     DBSubnetGroupName: !Ref rDatabaseSubnetGroup
  #     EnablePerformanceInsights: true
  #     PerformanceInsightsKMSKeyId: alias/aws/rds
  #     Engine: aurora-mysql
  #     MonitoringInterval: 60
  #     MonitoringRoleArn: !GetAtt rDBEnhancedMonitoringRole.Arn

Outputs:
  oVPC:
    Description: A reference to the created VPC
    Value: !Ref rVPC

  oPublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref rPublicSubnet1, !Ref rPublicSubnet2 ]]

  oPrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref rPrivateSubnet1, !Ref rPrivateSubnet2 ]]

  oPublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref rPublicSubnet1

  oPublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref rPublicSubnet2

  oPrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref rPrivateSubnet1

  oPrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref rPrivateSubnet2

  oNatGateway1:
    Value: !Ref rNatGatewaySubnet1

  oNatGateway2:
    Value: !Ref rNatGatewaySubnet2
